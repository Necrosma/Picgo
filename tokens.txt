FN_KW: fn
IDENT: is_digit
L_PAREN: (
IDENT: ch
COLON: :
IDENT: int
R_PAREN: )
ARROW: ->
IDENT: int
L_BRACE: {
IF_KW: if
IDENT: ch
LT: <
CHAR_LITERAL: 0
L_BRACE: {
RETURN_KW: return
UINT_LITERAL: 0
SEMICOLON: ;
R_BRACE: }
ELSE_KW: else
IF_KW: if
IDENT: ch
GT: >
CHAR_LITERAL: 9
L_BRACE: {
RETURN_KW: return
UINT_LITERAL: 0
SEMICOLON: ;
R_BRACE: }
ELSE_KW: else
L_BRACE: {
RETURN_KW: return
UINT_LITERAL: 1
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
FN_KW: fn
IDENT: is_space
L_PAREN: (
IDENT: ch
COLON: :
IDENT: int
R_PAREN: )
ARROW: ->
IDENT: int
L_BRACE: {
IF_KW: if
IDENT: ch
EQ: ==
CHAR_LITERAL:  =
L_BRACE: {
RETURN_KW: return
UINT_LITERAL: 1
SEMICOLON: ;
R_BRACE: }
ELSE_KW: else
IF_KW: if
IDENT: ch
EQ: ==
CHAR_LITERAL: 
=
L_BRACE: {
RETURN_KW: return
UINT_LITERAL: 1
SEMICOLON: ;
R_BRACE: }
ELSE_KW: else
IF_KW: if
IDENT: ch
EQ: ==
CHAR_LITERAL: =
L_BRACE: {
RETURN_KW: return
UINT_LITERAL: 1
SEMICOLON: ;
R_BRACE: }
ELSE_KW: else
IF_KW: if
IDENT: ch
EQ: ==
CHAR_LITERAL: 	=
L_BRACE: {
RETURN_KW: return
UINT_LITERAL: 1
SEMICOLON: ;
R_BRACE: }
ELSE_KW: else
L_BRACE: {
RETURN_KW: return
UINT_LITERAL: 0
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
FN_KW: fn
IDENT: atoi
L_PAREN: (
R_PAREN: )
ARROW: ->
IDENT: int
L_BRACE: {
LET_KW: let
IDENT: c
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: res
COLON: :
IDENT: int
ASSIGN: =
UINT_LITERAL: 0
SEMICOLON: ;
LET_KW: let
IDENT: neg
COLON: :
IDENT: int
ASSIGN: =
UINT_LITERAL: 0
SEMICOLON: ;
IDENT: c
ASSIGN: =
GETCHAR: getchar
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
WHILE_KW: while
IDENT: is_space
L_PAREN: (
IDENT: c
R_PAREN: )
L_BRACE: {
IDENT: c
ASSIGN: =
GETCHAR: getchar
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
R_BRACE: }
IF_KW: if
IDENT: c
EQ: ==
CHAR_LITERAL: -=
L_BRACE: {
IDENT: neg
ASSIGN: =
UINT_LITERAL: 1
SEMICOLON: ;
IDENT: c
ASSIGN: =
GETCHAR: getchar
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
R_BRACE: }
WHILE_KW: while
IDENT: is_digit
L_PAREN: (
IDENT: c
R_PAREN: )
L_BRACE: {
IDENT: res
ASSIGN: =
IDENT: res
MUL: *
UINT_LITERAL: 10
PLUS: +
L_PAREN: (
IDENT: c
MINUS: -
CHAR_LITERAL: 0
R_PAREN: )
SEMICOLON: ;
IDENT: c
ASSIGN: =
GETCHAR: getchar
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
R_BRACE: }
IF_KW: if
IDENT: neg
L_BRACE: {
IDENT: res
ASSIGN: =
MINUS: -
IDENT: res
SEMICOLON: ;
R_BRACE: }
RETURN_KW: return
IDENT: res
SEMICOLON: ;
R_BRACE: }
FN_KW: fn
IDENT: main
L_PAREN: (
R_PAREN: )
ARROW: ->
IDENT: void
L_BRACE: {
LET_KW: let
IDENT: count
COLON: :
IDENT: int
SEMICOLON: ;
IDENT: count
ASSIGN: =
GETINT: getint
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
WHILE_KW: while
IDENT: count
GT: >
UINT_LITERAL: 0
L_BRACE: {
PUTINT: putint
L_PAREN: (
IDENT: atoi
L_PAREN: (
R_PAREN: )
R_PAREN: )
SEMICOLON: ;
PUTLN: putln
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
IDENT: count
ASSIGN: =
IDENT: count
MINUS: -
UINT_LITERAL: 1
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
