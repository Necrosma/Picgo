LET_KW: let
IDENT: a0
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a1
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a2
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a3
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a4
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a5
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a6
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a7
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a8
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a9
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a10
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a11
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a12
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a13
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a14
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a15
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a16
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a17
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a18
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a19
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a20
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a21
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a22
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a23
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a24
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a25
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a26
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a27
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a28
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a29
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a30
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a31
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a32
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a33
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a34
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a35
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a36
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a37
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a38
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: a39
COLON: :
IDENT: int
SEMICOLON: ;
FN_KW: fn
IDENT: testParam8
L_PAREN: (
IDENT: a0
COLON: :
IDENT: int
COMMA: ,
IDENT: a1
COLON: :
IDENT: int
COMMA: ,
IDENT: a2
COLON: :
IDENT: int
COMMA: ,
IDENT: a3
COLON: :
IDENT: int
COMMA: ,
IDENT: a4
COLON: :
IDENT: int
COMMA: ,
IDENT: a5
COLON: :
IDENT: int
COMMA: ,
IDENT: a6
COLON: :
IDENT: int
COMMA: ,
IDENT: a7
COLON: :
IDENT: int
R_PAREN: )
ARROW: ->
IDENT: int
L_BRACE: {
RETURN_KW: return
IDENT: a0
PLUS: +
IDENT: a1
PLUS: +
IDENT: a2
PLUS: +
IDENT: a3
PLUS: +
IDENT: a4
PLUS: +
IDENT: a5
PLUS: +
IDENT: a6
PLUS: +
IDENT: a7
SEMICOLON: ;
R_BRACE: }
FN_KW: fn
IDENT: testParam16
L_PAREN: (
IDENT: a0
COLON: :
IDENT: int
COMMA: ,
IDENT: a1
COLON: :
IDENT: int
COMMA: ,
IDENT: a2
COLON: :
IDENT: int
COMMA: ,
IDENT: a3
COLON: :
IDENT: int
COMMA: ,
IDENT: a4
COLON: :
IDENT: int
COMMA: ,
IDENT: a5
COLON: :
IDENT: int
COMMA: ,
IDENT: a6
COLON: :
IDENT: int
COMMA: ,
IDENT: a7
COLON: :
IDENT: int
COMMA: ,
IDENT: a8
COLON: :
IDENT: int
COMMA: ,
IDENT: a9
COLON: :
IDENT: int
COMMA: ,
IDENT: a10
COLON: :
IDENT: int
COMMA: ,
IDENT: a11
COLON: :
IDENT: int
COMMA: ,
IDENT: a12
COLON: :
IDENT: int
COMMA: ,
IDENT: a13
COLON: :
IDENT: int
COMMA: ,
IDENT: a14
COLON: :
IDENT: int
COMMA: ,
IDENT: a15
COLON: :
IDENT: int
R_PAREN: )
ARROW: ->
IDENT: int
L_BRACE: {
RETURN_KW: return
IDENT: a0
PLUS: +
IDENT: a1
PLUS: +
IDENT: a2
MINUS: -
IDENT: a3
MINUS: -
IDENT: a4
MINUS: -
IDENT: a5
MINUS: -
IDENT: a6
MINUS: -
IDENT: a7
PLUS: +
IDENT: a8
PLUS: +
IDENT: a9
PLUS: +
IDENT: a10
PLUS: +
IDENT: a11
PLUS: +
IDENT: a12
PLUS: +
IDENT: a13
PLUS: +
IDENT: a14
PLUS: +
IDENT: a15
SEMICOLON: ;
R_BRACE: }
FN_KW: fn
IDENT: testParam32
L_PAREN: (
IDENT: a0
COLON: :
IDENT: int
COMMA: ,
IDENT: a1
COLON: :
IDENT: int
COMMA: ,
IDENT: a2
COLON: :
IDENT: int
COMMA: ,
IDENT: a3
COLON: :
IDENT: int
COMMA: ,
IDENT: a4
COLON: :
IDENT: int
COMMA: ,
IDENT: a5
COLON: :
IDENT: int
COMMA: ,
IDENT: a6
COLON: :
IDENT: int
COMMA: ,
IDENT: a7
COLON: :
IDENT: int
COMMA: ,
IDENT: a8
COLON: :
IDENT: int
COMMA: ,
IDENT: a9
COLON: :
IDENT: int
COMMA: ,
IDENT: a10
COLON: :
IDENT: int
COMMA: ,
IDENT: a11
COLON: :
IDENT: int
COMMA: ,
IDENT: a12
COLON: :
IDENT: int
COMMA: ,
IDENT: a13
COLON: :
IDENT: int
COMMA: ,
IDENT: a14
COLON: :
IDENT: int
COMMA: ,
IDENT: a15
COLON: :
IDENT: int
COMMA: ,
IDENT: a16
COLON: :
IDENT: int
COMMA: ,
IDENT: a17
COLON: :
IDENT: int
COMMA: ,
IDENT: a18
COLON: :
IDENT: int
COMMA: ,
IDENT: a19
COLON: :
IDENT: int
COMMA: ,
IDENT: a20
COLON: :
IDENT: int
COMMA: ,
IDENT: a21
COLON: :
IDENT: int
COMMA: ,
IDENT: a22
COLON: :
IDENT: int
COMMA: ,
IDENT: a23
COLON: :
IDENT: int
COMMA: ,
IDENT: a24
COLON: :
IDENT: int
COMMA: ,
IDENT: a25
COLON: :
IDENT: int
COMMA: ,
IDENT: a26
COLON: :
IDENT: int
COMMA: ,
IDENT: a27
COLON: :
IDENT: int
COMMA: ,
IDENT: a28
COLON: :
IDENT: int
COMMA: ,
IDENT: a29
COLON: :
IDENT: int
COMMA: ,
IDENT: a30
COLON: :
IDENT: int
COMMA: ,
IDENT: a31
COLON: :
IDENT: int
R_PAREN: )
ARROW: ->
IDENT: int
L_BRACE: {
RETURN_KW: return
IDENT: a0
PLUS: +
IDENT: a1
PLUS: +
IDENT: a2
PLUS: +
IDENT: a3
PLUS: +
IDENT: a4
PLUS: +
IDENT: a5
PLUS: +
IDENT: a6
PLUS: +
IDENT: a7
PLUS: +
IDENT: a8
PLUS: +
IDENT: a9
PLUS: +
IDENT: a10
PLUS: +
IDENT: a11
PLUS: +
IDENT: a12
PLUS: +
IDENT: a13
PLUS: +
IDENT: a14
PLUS: +
IDENT: a15
PLUS: +
IDENT: a16
PLUS: +
IDENT: a17
MINUS: -
IDENT: a18
MINUS: -
IDENT: a19
MINUS: -
IDENT: a20
MINUS: -
IDENT: a21
MINUS: -
IDENT: a22
PLUS: +
IDENT: a23
PLUS: +
IDENT: a24
PLUS: +
IDENT: a25
PLUS: +
IDENT: a26
PLUS: +
IDENT: a27
PLUS: +
IDENT: a28
PLUS: +
IDENT: a29
PLUS: +
IDENT: a30
PLUS: +
IDENT: a31
SEMICOLON: ;
R_BRACE: }
FN_KW: fn
IDENT: main
L_PAREN: (
R_PAREN: )
ARROW: ->
IDENT: void
L_BRACE: {
IDENT: a0
ASSIGN: =
UINT_LITERAL: 0
SEMICOLON: ;
IDENT: a1
ASSIGN: =
UINT_LITERAL: 1
SEMICOLON: ;
IDENT: a2
ASSIGN: =
UINT_LITERAL: 2
SEMICOLON: ;
IDENT: a3
ASSIGN: =
UINT_LITERAL: 3
SEMICOLON: ;
IDENT: a4
ASSIGN: =
UINT_LITERAL: 4
SEMICOLON: ;
IDENT: a5
ASSIGN: =
UINT_LITERAL: 5
SEMICOLON: ;
IDENT: a6
ASSIGN: =
UINT_LITERAL: 6
SEMICOLON: ;
IDENT: a7
ASSIGN: =
UINT_LITERAL: 7
SEMICOLON: ;
IDENT: a8
ASSIGN: =
UINT_LITERAL: 8
SEMICOLON: ;
IDENT: a9
ASSIGN: =
UINT_LITERAL: 9
SEMICOLON: ;
IDENT: a10
ASSIGN: =
UINT_LITERAL: 0
SEMICOLON: ;
IDENT: a11
ASSIGN: =
UINT_LITERAL: 1
SEMICOLON: ;
IDENT: a12
ASSIGN: =
UINT_LITERAL: 2
SEMICOLON: ;
IDENT: a13
ASSIGN: =
UINT_LITERAL: 3
SEMICOLON: ;
IDENT: a14
ASSIGN: =
UINT_LITERAL: 4
SEMICOLON: ;
IDENT: a15
ASSIGN: =
UINT_LITERAL: 5
SEMICOLON: ;
IDENT: a16
ASSIGN: =
UINT_LITERAL: 6
SEMICOLON: ;
IDENT: a17
ASSIGN: =
UINT_LITERAL: 7
SEMICOLON: ;
IDENT: a18
ASSIGN: =
UINT_LITERAL: 8
SEMICOLON: ;
IDENT: a19
ASSIGN: =
UINT_LITERAL: 9
SEMICOLON: ;
IDENT: a20
ASSIGN: =
UINT_LITERAL: 0
SEMICOLON: ;
IDENT: a21
ASSIGN: =
UINT_LITERAL: 1
SEMICOLON: ;
IDENT: a22
ASSIGN: =
UINT_LITERAL: 2
SEMICOLON: ;
IDENT: a23
ASSIGN: =
UINT_LITERAL: 3
SEMICOLON: ;
IDENT: a24
ASSIGN: =
UINT_LITERAL: 4
SEMICOLON: ;
IDENT: a25
ASSIGN: =
UINT_LITERAL: 5
SEMICOLON: ;
IDENT: a26
ASSIGN: =
UINT_LITERAL: 6
SEMICOLON: ;
IDENT: a27
ASSIGN: =
UINT_LITERAL: 7
SEMICOLON: ;
IDENT: a28
ASSIGN: =
UINT_LITERAL: 8
SEMICOLON: ;
IDENT: a29
ASSIGN: =
UINT_LITERAL: 9
SEMICOLON: ;
IDENT: a30
ASSIGN: =
UINT_LITERAL: 0
SEMICOLON: ;
IDENT: a31
ASSIGN: =
UINT_LITERAL: 1
SEMICOLON: ;
IDENT: a32
ASSIGN: =
UINT_LITERAL: 4
SEMICOLON: ;
IDENT: a33
ASSIGN: =
UINT_LITERAL: 5
SEMICOLON: ;
IDENT: a34
ASSIGN: =
UINT_LITERAL: 6
SEMICOLON: ;
IDENT: a35
ASSIGN: =
UINT_LITERAL: 7
SEMICOLON: ;
IDENT: a36
ASSIGN: =
UINT_LITERAL: 8
SEMICOLON: ;
IDENT: a37
ASSIGN: =
UINT_LITERAL: 9
SEMICOLON: ;
IDENT: a38
ASSIGN: =
UINT_LITERAL: 0
SEMICOLON: ;
IDENT: a39
ASSIGN: =
UINT_LITERAL: 1
SEMICOLON: ;
IDENT: a0
ASSIGN: =
IDENT: testParam8
L_PAREN: (
IDENT: a0
COMMA: ,
IDENT: a1
COMMA: ,
IDENT: a2
COMMA: ,
IDENT: a3
COMMA: ,
IDENT: a4
COMMA: ,
IDENT: a5
COMMA: ,
IDENT: a6
COMMA: ,
IDENT: a7
R_PAREN: )
SEMICOLON: ;
PUTINT: putint
L_PAREN: (
IDENT: a0
R_PAREN: )
SEMICOLON: ;
PUTLN: putln
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
IDENT: a0
ASSIGN: =
IDENT: testParam16
L_PAREN: (
IDENT: a32
COMMA: ,
IDENT: a33
COMMA: ,
IDENT: a34
COMMA: ,
IDENT: a35
COMMA: ,
IDENT: a36
COMMA: ,
IDENT: a37
COMMA: ,
IDENT: a38
COMMA: ,
IDENT: a39
COMMA: ,
IDENT: a8
COMMA: ,
IDENT: a9
COMMA: ,
IDENT: a10
COMMA: ,
IDENT: a11
COMMA: ,
IDENT: a12
COMMA: ,
IDENT: a13
COMMA: ,
IDENT: a14
COMMA: ,
IDENT: a15
R_PAREN: )
SEMICOLON: ;
PUTINT: putint
L_PAREN: (
IDENT: a0
R_PAREN: )
SEMICOLON: ;
PUTLN: putln
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
IDENT: a0
ASSIGN: =
IDENT: testParam32
L_PAREN: (
IDENT: a0
COMMA: ,
IDENT: a1
COMMA: ,
IDENT: a2
COMMA: ,
IDENT: a3
COMMA: ,
IDENT: a4
COMMA: ,
IDENT: a5
COMMA: ,
IDENT: a6
COMMA: ,
IDENT: a7
COMMA: ,
IDENT: a8
COMMA: ,
IDENT: a9
COMMA: ,
IDENT: a10
COMMA: ,
IDENT: a11
COMMA: ,
IDENT: a12
COMMA: ,
IDENT: a13
COMMA: ,
IDENT: a14
COMMA: ,
IDENT: a15
COMMA: ,
IDENT: a16
COMMA: ,
IDENT: a17
COMMA: ,
IDENT: a18
COMMA: ,
IDENT: a19
COMMA: ,
IDENT: a20
COMMA: ,
IDENT: a21
COMMA: ,
IDENT: a22
COMMA: ,
IDENT: a23
COMMA: ,
IDENT: a24
COMMA: ,
IDENT: a25
COMMA: ,
IDENT: a26
COMMA: ,
IDENT: a27
COMMA: ,
IDENT: a28
COMMA: ,
IDENT: a29
COMMA: ,
IDENT: a30
COMMA: ,
IDENT: a31
R_PAREN: )
SEMICOLON: ;
PUTINT: putint
L_PAREN: (
IDENT: a0
R_PAREN: )
SEMICOLON: ;
PUTLN: putln
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
R_BRACE: }
