FN_KW: fn
IDENT: main
L_PAREN: (
R_PAREN: )
ARROW: ->
IDENT: void
L_BRACE: {
LET_KW: let
IDENT: instruction
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: low
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: high
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: mid
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: count
COLON: :
IDENT: int
SEMICOLON: ;
IDENT: count
ASSIGN: =
GETINT: getint
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
WHILE_KW: while
IDENT: count
GT: >
UINT_LITERAL: 0
L_BRACE: {
IDENT: low
ASSIGN: =
GETINT: getint
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
IDENT: high
ASSIGN: =
GETINT: getint
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
IDENT: count
ASSIGN: =
IDENT: count
MINUS: -
UINT_LITERAL: 1
SEMICOLON: ;
WHILE_KW: while
UINT_LITERAL: 1
L_BRACE: {
IDENT: mid
ASSIGN: =
L_PAREN: (
IDENT: low
PLUS: +
IDENT: high
PLUS: +
UINT_LITERAL: 1
R_PAREN: )
DIV: /
UINT_LITERAL: 2
SEMICOLON: ;
IDENT: instruction
ASSIGN: =
GETINT: getint
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
IF_KW: if
IDENT: instruction
EQ: ==
UINT_LITERAL: 0
L_BRACE: {
BREAK_KW: break
SEMICOLON: ;
R_BRACE: }
ELSE_KW: else
IF_KW: if
IDENT: instruction
EQ: ==
UINT_LITERAL: 1
L_BRACE: {
IDENT: high
ASSIGN: =
IDENT: mid
SEMICOLON: ;
R_BRACE: }
ELSE_KW: else
IF_KW: if
IDENT: instruction
EQ: ==
UINT_LITERAL: 2
L_BRACE: {
IDENT: low
ASSIGN: =
IDENT: mid
SEMICOLON: ;
R_BRACE: }
ELSE_KW: else
L_BRACE: {
PUTSTR: putstr
L_PAREN: (
STRING_LITERAL: Invalid instruction!
R_PAREN: )
SEMICOLON: ;
PUTLN: putln
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
CONTINUE_KW: continue
SEMICOLON: ;
R_BRACE: }
IF_KW: if
IDENT: low
EQ: ==
IDENT: high
L_BRACE: {
PUTSTR: putstr
L_PAREN: (
STRING_LITERAL: You cheated!
R_PAREN: )
SEMICOLON: ;
PUTLN: putln
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
BREAK_KW: break
SEMICOLON: ;
R_BRACE: }
PUTINT: putint
L_PAREN: (
IDENT: mid
R_PAREN: )
SEMICOLON: ;
PUTLN: putln
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
R_BRACE: }
PUTINT: putint
