FN_KW: fn
IDENT: main
L_PAREN: (
R_PAREN: )
ARROW: ->
IDENT: void
L_BRACE: {
LET_KW: let
IDENT: c
COLON: :
IDENT: int
ASSIGN: =
UINT_LITERAL: 0
SEMICOLON: ;
LET_KW: let
IDENT: i
COLON: :
IDENT: int
SEMICOLON: ;
WHILE_KW: while
UINT_LITERAL: 1
L_BRACE: {
IDENT: i
ASSIGN: =
UINT_LITERAL: 0
SEMICOLON: ;
WHILE_KW: while
IDENT: i
LT: <
UINT_LITERAL: 9
MINUS: -
IDENT: c
L_BRACE: {
PUTCHAR: putchar
L_PAREN: (
UINT_LITERAL: 32
R_PAREN: )
SEMICOLON: ;
IDENT: i
ASSIGN: =
IDENT: i
PLUS: +
UINT_LITERAL: 1
SEMICOLON: ;
R_BRACE: }
IDENT: i
ASSIGN: =
UINT_LITERAL: 0
SEMICOLON: ;
WHILE_KW: while
IDENT: i
LT: <
UINT_LITERAL: 2
MUL: *
IDENT: c
PLUS: +
UINT_LITERAL: 1
L_BRACE: {
PUTCHAR: putchar
L_PAREN: (
UINT_LITERAL: 42
R_PAREN: )
SEMICOLON: ;
IDENT: i
ASSIGN: =
