FN_KW: fn
IDENT: is_odd
L_PAREN: (
IDENT: x
COLON: :
IDENT: int
R_PAREN: )
ARROW: ->
IDENT: int
L_BRACE: {
RETURN_KW: return
L_PAREN: (
IDENT: x
DIV: /
UINT_LITERAL: 2
MUL: *
UINT_LITERAL: 2
R_PAREN: )
MINUS: -
IDENT: x
SEMICOLON: ;
R_BRACE: }
FN_KW: fn
IDENT: fastpow
L_PAREN: (
IDENT: base
COLON: :
IDENT: int
COMMA: ,
IDENT: exp
COLON: :
IDENT: int
R_PAREN: )
ARROW: ->
IDENT: int
L_BRACE: {
LET_KW: let
IDENT: res
COLON: :
IDENT: int
ASSIGN: =
UINT_LITERAL: 1
SEMICOLON: ;
IF_KW: if
IDENT: exp
LT: <
UINT_LITERAL: 0
L_BRACE: {
RETURN_KW: return
UINT_LITERAL: 0
SEMICOLON: ;
R_BRACE: }
WHILE_KW: while
IDENT: exp
GT: >
UINT_LITERAL: 0
L_BRACE: {
IF_KW: if
IDENT: is_odd
L_PAREN: (
IDENT: exp
R_PAREN: )
L_BRACE: {
IDENT: res
ASSIGN: =
IDENT: res
MUL: *
IDENT: base
SEMICOLON: ;
R_BRACE: }
IDENT: base
ASSIGN: =
IDENT: base
MUL: *
IDENT: base
SEMICOLON: ;
IDENT: exp
ASSIGN: =
IDENT: exp
DIV: /
UINT_LITERAL: 2
SEMICOLON: ;
R_BRACE: }
RETURN_KW: return
IDENT: res
SEMICOLON: ;
R_BRACE: }
FN_KW: fn
IDENT: main
L_PAREN: (
R_PAREN: )
ARROW: ->
IDENT: void
L_BRACE: {
LET_KW: let
IDENT: base
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: exp
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: count
COLON: :
IDENT: int
SEMICOLON: ;
IDENT: count
ASSIGN: =
GETINT: getint
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
WHILE_KW: while
IDENT: count
GT: >
UINT_LITERAL: 0
L_BRACE: {
IDENT: base
ASSIGN: =
GETINT: getint
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
IDENT: exp
ASSIGN: =
GETINT: getint
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
PUTINT: putint
L_PAREN: (
IDENT: fastpow
L_PAREN: (
IDENT: base
COMMA: ,
IDENT: exp
R_PAREN: )
R_PAREN: )
SEMICOLON: ;
PUTLN: putln
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
IDENT: count
ASSIGN: =
IDENT: count
MINUS: -
UINT_LITERAL: 1
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
