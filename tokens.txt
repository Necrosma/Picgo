FN_KW: fn
IDENT: move
L_PAREN: (
IDENT: level
COLON: :
IDENT: int
COMMA: ,
IDENT: a
COLON: :
IDENT: int
COMMA: ,
IDENT: c
COLON: :
IDENT: int
R_PAREN: )
ARROW: ->
IDENT: void
L_BRACE: {
PUTINT: putint
L_PAREN: (
IDENT: level
R_PAREN: )
SEMICOLON: ;
PUTCHAR: putchar
L_PAREN: (
UINT_LITERAL: 32
R_PAREN: )
SEMICOLON: ;
PUTCHAR: putchar
L_PAREN: (
IDENT: a
R_PAREN: )
SEMICOLON: ;
PUTCHAR: putchar
L_PAREN: (
UINT_LITERAL: 32
R_PAREN: )
SEMICOLON: ;
PUTCHAR: putchar
L_PAREN: (
IDENT: c
R_PAREN: )
SEMICOLON: ;
PUTLN: putln
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
R_BRACE: }
FN_KW: fn
IDENT: hanoi
L_PAREN: (
IDENT: level
COLON: :
IDENT: int
COMMA: ,
IDENT: a
COLON: :
IDENT: int
COMMA: ,
IDENT: b
COLON: :
IDENT: int
COMMA: ,
IDENT: c
COLON: :
IDENT: int
R_PAREN: )
ARROW: ->
IDENT: void
L_BRACE: {
IF_KW: if
IDENT: level
EQ: ==
UINT_LITERAL: 1
L_BRACE: {
IDENT: move
L_PAREN: (
IDENT: level
COMMA: ,
IDENT: a
COMMA: ,
IDENT: c
R_PAREN: )
SEMICOLON: ;
R_BRACE: }
ELSE_KW: else
L_BRACE: {
IDENT: hanoi
L_PAREN: (
IDENT: level
MINUS: -
UINT_LITERAL: 1
COMMA: ,
IDENT: a
COMMA: ,
IDENT: c
COMMA: ,
IDENT: b
R_PAREN: )
SEMICOLON: ;
IDENT: move
L_PAREN: (
IDENT: level
COMMA: ,
IDENT: a
COMMA: ,
IDENT: c
R_PAREN: )
SEMICOLON: ;
IDENT: hanoi
L_PAREN: (
IDENT: level
MINUS: -
UINT_LITERAL: 1
COMMA: ,
IDENT: b
COMMA: ,
IDENT: a
COMMA: ,
IDENT: c
R_PAREN: )
SEMICOLON: ;
R_BRACE: }
R_BRACE: }
FN_KW: fn
IDENT: main
L_PAREN: (
R_PAREN: )
ARROW: ->
IDENT: void
L_BRACE: {
IDENT: hanoi
L_PAREN: (
UINT_LITERAL: 6
COMMA: ,
UINT_LITERAL: 65
COMMA: ,
UINT_LITERAL: 66
COMMA: ,
UINT_LITERAL: 67
R_PAREN: )
SEMICOLON: ;
R_BRACE: }
