FN_KW: fn
IDENT: add
L_PAREN: (
IDENT: a
COLON: :
IDENT: int
COMMA: ,
IDENT: b
COLON: :
IDENT: int
R_PAREN: )
ARROW: ->
IDENT: int
L_BRACE: {
RETURN_KW: return
IDENT: a
PLUS: +
IDENT: b
SEMICOLON: ;
R_BRACE: }
FN_KW: fn
IDENT: main
L_PAREN: (
R_PAREN: )
ARROW: ->
IDENT: void
L_BRACE: {
LET_KW: let
IDENT: x
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: y
COLON: :
IDENT: int
SEMICOLON: ;
LET_KW: let
IDENT: z
COLON: :
IDENT: int
SEMICOLON: ;
IDENT: x
ASSIGN: =
GETINT: getint
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
IDENT: y
ASSIGN: =
GETINT: getint
L_PAREN: (
R_PAREN: )
SEMICOLON: ;
IDENT: z
ASSIGN: =
IDENT: add
L_PAREN: (
IDENT: x
COMMA: ,
IDENT: y
R_PAREN: )
SEMICOLON: ;
PUTINT: putint
L_PAREN: (
IDENT: z
R_PAREN: )
SEMICOLON: ;
R_BRACE: }
